"use client";

import { useEffect, useState, useCallback, useRef } from "react";
import { useSupabase } from "@/contexts/SupabaseContext";
import { toast } from "@/shared/hooks/useToast";
import { Reservation } from "../utils/reservationTypes";

interface UseReservationRealtimeProps {
  isAdmin: boolean;
  authLoading: boolean;
  onReservationsUpdate: React.Dispatch<React.SetStateAction<Reservation[]>>;
}

interface UseReservationRealtimeReturn {
  isRealtimeConnected: boolean;
}

export function useReservationRealtime({
  isAdmin,
  authLoading,
  onReservationsUpdate
}: UseReservationRealtimeProps): UseReservationRealtimeReturn {
  const [isRealtimeConnected, setIsRealtimeConnected] = useState(false);
  const hasShownConnectionToast = useRef(false);
  
  const supabase = useSupabase();
  
  // Realtime Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ Ìï®Ïàò
  const handleRealtimeChange = useCallback(async (payload: any) => {
    const { eventType, new: newRecord, old: oldRecord } = payload;
    
    try {
      switch (eventType) {
        case 'INSERT':
          console.log('[Realtime] ÏÉà ÏòàÏïΩ ÏÉùÏÑ±:', newRecord);
          // ÏÉà ÏòàÏïΩÏùò Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞(Í≥†Í∞ù, ÏÑúÎπÑÏä§)Î•º Ìè¨Ìï®Ìï¥ÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
          const { data: newReservationData, error: fetchError } = await supabase
            .from('reservations')
            .select(`
              *,
              customers(id, email, nickname, phone),
              services(id, name, price_per_hour)
            `)
            .eq('id', newRecord.id)
            .single();

          if (fetchError) {
            console.error('[Realtime] ÏÉà ÏòàÏïΩ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', fetchError);
            return;
          }

          // ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ï°∞Ìï© ÌïÑÎìú Ï∂îÍ∞Ä
          const processedNewReservation = {
            ...newReservationData,
            combined_start_time: newReservationData.reservation_date && newReservationData.start_time 
              ? `${newReservationData.reservation_date}T${newReservationData.start_time}` 
              : null,
            combined_end_time: newReservationData.reservation_date && newReservationData.end_time 
              ? `${newReservationData.reservation_date}T${newReservationData.end_time}` 
              : null,
          };

          onReservationsUpdate(prev => [processedNewReservation, ...prev]);
          
          toast({
            title: "üéâ ÏÉà ÏòàÏïΩ Ï†ëÏàò",
            description: `${newReservationData.customer_name || 'Í≥†Í∞ù'}ÎãòÏùò ÏòàÏïΩÏù¥ Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§.`,
          });
          break;

        case 'UPDATE':
          console.log('[Realtime] ÏòàÏïΩ ÏóÖÎç∞Ïù¥Ìä∏:', newRecord);
          // ÏóÖÎç∞Ïù¥Ìä∏Îêú ÏòàÏïΩÏùò Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞Î•º Ìè¨Ìï®Ìï¥ÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
          const { data: updatedReservationData, error: updateFetchError } = await supabase
            .from('reservations')
            .select(`
              *,
              customers(id, email, nickname, phone),
              services(id, name, price_per_hour)
            `)
            .eq('id', newRecord.id)
            .single();

          if (updateFetchError) {
            console.error('[Realtime] ÏóÖÎç∞Ïù¥Ìä∏Îêú ÏòàÏïΩ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', updateFetchError);
            return;
          }

          // ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ï°∞Ìï© ÌïÑÎìú Ï∂îÍ∞Ä
          const processedUpdatedReservation = {
            ...updatedReservationData,
            combined_start_time: updatedReservationData.reservation_date && updatedReservationData.start_time 
              ? `${updatedReservationData.reservation_date}T${updatedReservationData.start_time}` 
              : null,
            combined_end_time: updatedReservationData.reservation_date && updatedReservationData.end_time 
              ? `${updatedReservationData.reservation_date}T${updatedReservationData.end_time}` 
              : null,
          };

          onReservationsUpdate(prev => 
            prev.map(reservation => 
              reservation.id === newRecord.id 
                ? processedUpdatedReservation 
                : reservation
            )
          );

          // ÏÉÅÌÉú Î≥ÄÍ≤ΩÏóê Îî∞Î•∏ ÏïåÎ¶º
          if (oldRecord.status !== newRecord.status) {
            const statusMessages = {
              'confirmed': 'ÏòàÏïΩÏù¥ ÌôïÏ†ïÎêòÏóàÏäµÎãàÎã§',
              'cancelled': 'ÏòàÏïΩÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§',
              'modified': 'ÏòàÏïΩÏù¥ Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§',
              'completed': 'ÏòàÏïΩÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§'
            };
            
            toast({
              title: "üìù ÏòàÏïΩ ÏÉÅÌÉú Î≥ÄÍ≤Ω",
              description: statusMessages[newRecord.status as keyof typeof statusMessages] || 'ÏòàÏïΩÏù¥ ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§',
            });
          }
          break;

        case 'DELETE':
          console.log('[Realtime] ÏòàÏïΩ ÏÇ≠Ï†ú:', oldRecord);
          onReservationsUpdate(prev => prev.filter(reservation => reservation.id !== oldRecord.id));
          
          toast({
            title: "üóëÔ∏è ÏòàÏïΩ ÏÇ≠Ï†ú",
            description: "ÏòàÏïΩÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.",
          });
          break;

        default:
          console.log('[Realtime] Ïïå Ïàò ÏóÜÎäî Ïù¥Î≤§Ìä∏:', eventType);
      }
    } catch (error) {
      console.error('[Realtime] Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:', error);
      toast({
        title: "Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò",
        description: "Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    }
  }, [supabase, onReservationsUpdate]);
  
  // Realtime Íµ¨ÎèÖ ÏÑ§Ï†ï
  useEffect(() => {
    if (!isAdmin || authLoading) return;
    
    console.log("[Ïñ¥ÎìúÎØº ÏòàÏïΩ ÌéòÏù¥ÏßÄ] Realtime Íµ¨ÎèÖ Ï¥àÍ∏∞Ìôî");
    
    // ÏÉÅÌÉú Ï∞∏Ï°∞Î•º ÏúÑÌïú ref
    let isConnectedRef = false;
    
    // Realtime Íµ¨ÎèÖ ÏÑ§Ï†ï
    const channel = supabase
      .channel('reservations-changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'reservations'
        },
        (payload) => {
          console.log('[Realtime] ÏòàÏïΩ Î≥ÄÌôî Í∞êÏßÄ:', payload);
          handleRealtimeChange(payload);
        }
      )
      .subscribe((status) => {
        console.log('[Realtime] Íµ¨ÎèÖ ÏÉÅÌÉú:', status);
        
        if (status === 'SUBSCRIBED') {
          console.log('[Realtime] ‚úÖ Íµ¨ÎèÖ ÏÑ±Í≥µ');
          isConnectedRef = true;
          setIsRealtimeConnected(true);
          
          // Ï≤òÏùå Ïó∞Í≤∞ÎêòÏóàÏùÑ ÎïåÎßå ÌÜ†Ïä§Ìä∏ ÌëúÏãú
          if (!hasShownConnectionToast.current) {
            hasShownConnectionToast.current = true;
            toast({
              title: "Ïã§ÏãúÍ∞Ñ Ïó∞Í≤∞Îê®",
              description: "ÏòàÏïΩ Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Î∞òÏòÅÎê©ÎãàÎã§.",
            });
          }
        } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT') {
          isConnectedRef = false;
          setIsRealtimeConnected(false);
        } else if (status === 'CLOSED') {
          isConnectedRef = false;
          setIsRealtimeConnected(false);
        }
      });

    // Ïó∞Í≤∞ ÏÉÅÌÉú Ï≤¥ÌÅ¨ (10Ï¥àÎßàÎã§)
    const healthCheck = setInterval(() => {
      const channelState = channel.state;
      const isConnected = channelState === 'joined';
      
      if (isConnected !== isConnectedRef) {
        console.log('[Realtime] Ïó∞Í≤∞ ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∞êÏßÄ:', { channelState, isConnected });
        isConnectedRef = isConnected;
        setIsRealtimeConnected(isConnected);
      }
    }, 10000);

    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ï†ïÎ¶¨
    return () => {
      console.log('[Realtime] Íµ¨ÎèÖ Ìï¥Ï†ú');
      clearInterval(healthCheck);
      supabase.removeChannel(channel);
    };
  }, [supabase, handleRealtimeChange, isAdmin, authLoading]);

  return {
    isRealtimeConnected
  };
} 